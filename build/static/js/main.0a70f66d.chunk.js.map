{"version":3,"sources":["components/Optionsfield.js","components/Legend.js","App.js","index.js"],"names":["Optionsfield","props","className","options","map","option","i","onChange","changeState","checked","layer","name","type","Legend","active","description","stops","stop","style","backgroundColor","toLocaleString","App","mapContainer","useRef","lng","setLng","useState","lat","setLat","zoom","setZoom","setActive","assess_eligibility","rendered_features","elig_checks","res","eligibility","r","id","push","useEffect","current","mapboxgl","Map","container","center","geocoder","MapboxGeocoder","accessToken","addControl","on","e","results","queryRenderedFeatures","result","o","popup","Popup","closeButton","addTo","setLngLat","setHTML","setPaintProperty","getCenter","toFixed","getZoom","features","console","log","coords","lngLat","toArray","href","ref","j","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a70f66d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Optionsfield = (props) => {\n  const renderOptions = (option, i) => {\n    return (\n      <label key={i} className=\"toggle-container\">\n        <input\n          onChange={() => props.changeState(i)}\n          checked={option.layer === props.layer}\n          name=\"toggle\"\n          type=\"radio\"\n        />\n        <div className=\"toggle txt-s py3 toggle--active-white\">\n          {option.name}\n        </div>\n      </label>\n    );\n  };\n  return (\n    <div className=\"toggle-group border border--2 border--white bg-white shadow-darken10 z1\">\n      {props.options.map(renderOptions)}\n    </div>\n  );\n};\n\nexport default Optionsfield;\n","import React from \"react\";\n\nconst Legend = (props) => {\n  const renderLegendKeys = (stop, i) => {\n    return (\n      <div key={i} className=\"txt-s\">\n        <span\n          className=\"mr6 round-full w12 h12 inline-block align-middle\"\n          style={{ backgroundColor: stop[1] }}\n        />\n        <span>{`${stop[0].toLocaleString()}`}</span>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"legend bg-white mr12 mb24 py12 px12 shadow-darken10 round z1 wmax180\">\n        <div className=\"mb6\">\n          <h2 className=\"txt-bold txt-s block\">{props.active.name}</h2>\n          <p className=\"txt-s color-gray\">{props.active.description}</p>\n        </div>\n        {props.stops.map(renderLegendKeys)}\n      </div>\n    </>\n  );\n};\n\nexport default Legend;\n","import React, { useRef, useEffect, useState } from 'react';\n\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport Optionsfield from './components/Optionsfield';\nimport Legend from './components/Legend';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoibmF0azciLCJhIjoiY2t5dmc0anBpMHk4bzJybzhkdGg0MHdzdCJ9.nTfTTvKc1T0IQeIZocIOQA';\n\nexport default function App() {\n\t// defaults\n\tconst mapContainer = useRef(null);\n\tconst map = useRef(null);\n\tconst [lng, setLng] = useState(10.4515);\n\tconst [lat, setLat] = useState(51.1657);\n\tconst [zoom, setZoom] = useState(5);\n\tvar popup = useRef(null);\n\n\tconst options = [\n\t    {\n\t      name: 'Key Biodiversity Areas',\n\t      description: 'Natura 2000 sites incl. 2 km buffer zones.',\n\t      layer: 'n2k-germany',\n\t      stops: [\n\t        [\"Cropland\", '#ecf240'],\n\t        [\"Woodland and forest\", '#3d840b'],\n\t        [\"Grassland\", '#e4bb07'],\n\t        [\"Heathland and scrub\", '#a4c73d'],\n\t        [\"Open spaces with little or no vegetation\", '#52ffb4'],\n\t        [\"Wetland\", '#b472ee'],\n\t        [\"Water\", '#294ffa']\n\t      ]\n\t    },\n\t    {\n\t      name: 'Soil carbon',\n\t      description: 'Organic carbon stored in soil (g C/kg), derived from LUCAS topsoil sample dataset.',\n\t      layer: 'organic_carbon',\n\t      stops: [\n\t        [\"High\", '#dd800e'],\n\t      ]\n\t    },\n\t    {\n\t      name: 'Forestry',\n\t      description: 'Tree cover detected from satellite imagery.',\n\t      layer: 'national-park',\n\t      stops: [\n\t        [\"Protected forest area\", '#266a01']\n\t      ]\n\t    }\n    ];\n  const [active, setActive] = useState(options[0]);\n\n  // Assess eligibility of the selected coordinates based on layers.\n  function assess_eligibility(rendered_features) {\n  \t\n\t\tvar elig_checks = [];\n\n\t\tfor (const option of options) {\n\t\t\tvar res = {\n\t\t\t\tlayer: option.layer,\n\t\t\t\tname: option.name,\n\t\t\t\teligibility: true\n\t\t\t};\n\n\t\t\tfor (const r of rendered_features) {\n\t\t\t\tif (r.layer.id === res.layer) {\n\t\t\t\t\tres.eligibility = false;\n\t\t\t\t}\n\t\t\t};\n\t\t\telig_checks.push(res);\n\t\t}\n\n\t\treturn elig_checks;\n\t};\n\n\tuseEffect(() => {\n\t\tif (map.current) return; \n\t\t// initialize map only once\n\t\tmap.current = new mapboxgl.Map({\n\t\t  container: mapContainer.current,\n\t\t  style: 'mapbox://styles/natk7/ckyvg82kk003b14n1tuq11p21',\n\t\t  center: [lng, lat],\n\t\t  zoom: zoom\n\t\t});\n\n\t\tvar geocoder = new MapboxGeocoder({\n\t\t\taccessToken: mapboxgl.accessToken,\n\t\t\tmapboxgl: mapboxgl\n\t\t});\n\n\t\t// Adding search box for addresses.\n\t\tmap.current.addControl(geocoder);\n\n\t\tgeocoder.on('result', e => {\n\n\t      var eligibility =  '';\n\t      var pointer_results = map.current.queryRenderedFeatures(\n\t\t\t\t\t\te.result.center,\n\t\t\t\t\t\t{'layers': options.map(\n\t\t\t\t\t\tfunction (o) {\n\t\t\t\t\t\t\treturn o.layer\n\t\t\t\t\t\t}\n\t\t\t\t\t)}\n\t\t\t\t);\n\t      var results = assess_eligibility(pointer_results);\n\t      \n\t      for (const r of results) {\n\t      \teligibility += '<li>' + r.name + ': ' + (r.eligibility ? '<b class=\"elig\">Eligible</b>' : '<b class=\"non-elig\">Non-eligible</b>') + '</li>';\n\t      }\n\t\t\t\t\n\t\t\t\tif (!popup) {var popup = new mapboxgl.Popup({closeButton: false}).addTo(map.current)};\n\t\t\t\tpopup.setLngLat(e.result.center)\n\t\t\t\t\t.setHTML(eligibility);\n\t\t\t\t\n\t\t});\n\n\t\tmap.current.on('load', () => {\n\t\t\tfor (const option of options) {\n\t\t\t\tif (active !== option) {\n\t\t\t\t\tmap.current.setPaintProperty(option.layer, 'fill-opacity', 0);\n\t\t\t\t}\n\t\t\t};\n\t\t})\n\t});\n\n\tuseEffect(() => {\n\t\tif (!map.current) return; // wait for map to initialize\n\t\tmap.current.on('move', () => {\n\t\t  setLng(map.current.getCenter().lng.toFixed(4));\n\t\t  setLat(map.current.getCenter().lat.toFixed(4));\n\t\t  setZoom(map.current.getZoom().toFixed(2));\n\t\t});\n\t});\n\n\tuseEffect(() => {\n\t\tif (!map.current) return; // wait for map to initialize\n\t\tmap.current.on('click', options.map(function (o) {return o.layer}), (e) => {\n\t\t\t\t\t\n\t\t\tvar results = assess_eligibility(e.features);\n\t\t\tconsole.log(results);\n\t\t\tvar eligibility = '';\n\t\t\tfor (const r of results) {\n\t      \teligibility += '<li>' + r.name + ': ' + (r.eligibility ? '<b class=\"elig\">Eligible</b>' : '<b class=\"non-elig\">Non-eligible</b>') + '</li>';\n\t      };\n\t\t\t\t\n\t    const coords = e.lngLat.toArray();\n\n\t    if (!popup) {var popup = new mapboxgl.Popup({closeButton: false}).addTo(map.current)};\n\t\t\tpopup.setLngLat(coords)\n\t\t\t\t.setHTML(eligibility);\n\t\t\t\t\n\t\t  setLng(coords[0]);\n\t\t  setLat(coords[1]);\n\t\t  setZoom(5);\n\t\t});\n\t});\n\n\tconst changeState = i => {\n\t\tsetActive(options[i]);\n\t\tfor (let j = 0; j < options.length; j++) {\n\t\t\tif (i === j) {\n\t\t\t\t// make active layer visible\n\t\t\t\tmap.current.setPaintProperty(options[j].layer, 'fill-opacity', 1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// hide inactive layers\n\t\t\t\tmap.current.setPaintProperty(options[j].layer, 'fill-opacity', 0);\n\n\t\t\t}\n\t\t};\n    };\n\n  return (\n    <div>\n        <header className=\"app-header\">\n          <h1>\n            Construction project validation against the DNSH Biodiversity criteria (<a href=\"https://ec.europa.eu/sustainable-finance-taxonomy/activities/activity_en.htm?reference=7.1\">EU Taxonomy</a>).\n          </h1>\n          Type in an address in the search box to validate the eligibility of a given building.\n        </header>\n      <div ref={mapContainer} className=\"map-container\" />\n      <Legend active={active} stops={active.stops} />\n      <Optionsfield\n        options={options}\n        layer={active.layer}\n        changeState={changeState}\n      />\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}