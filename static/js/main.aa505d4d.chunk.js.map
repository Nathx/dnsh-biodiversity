{"version":3,"sources":["components/Optionsfield.js","components/Legend.js","App.js","index.js"],"names":["Optionsfield","props","className","options","map","option","i","onChange","changeState","checked","layer","name","type","Legend","active","description","stops","stop","style","backgroundColor","toLocaleString","App","mapContainer","useRef","lng","setLng","useState","lat","setLat","zoom","setZoom","setActive","useEffect","current","mapboxgl","Map","container","center","addControl","MapboxGeocoder","accessToken","on","setLayoutProperty","getCenter","toFixed","getZoom","ref","j","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa505d4d.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Optionsfield = (props) => {\n  const renderOptions = (option, i) => {\n    return (\n      <label key={i} className=\"toggle-container\">\n        <input\n          onChange={() => props.changeState(i)}\n          checked={option.layer === props.layer}\n          name=\"toggle\"\n          type=\"radio\"\n        />\n        <div className=\"toggle txt-s py3 toggle--active-white\">\n          {option.name}\n        </div>\n      </label>\n    );\n  };\n  return (\n    <div className=\"toggle-group border border--2 border--white bg-white shadow-darken10 z1\">\n      {props.options.map(renderOptions)}\n    </div>\n  );\n};\n\nexport default Optionsfield;\n","import React from \"react\";\n\nconst Legend = (props) => {\n  const renderLegendKeys = (stop, i) => {\n    return (\n      <div key={i} className=\"txt-s\">\n        <span\n          className=\"mr6 round-full w12 h12 inline-block align-middle\"\n          style={{ backgroundColor: stop[1] }}\n        />\n        <span>{`${stop[0].toLocaleString()}`}</span>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"legend bg-white mr12 mb24 py12 px12 shadow-darken10 round z1 wmax180\">\n        <div className=\"mb6\">\n          <h2 className=\"txt-bold txt-s block\">{props.active.name}</h2>\n          <p className=\"txt-s color-gray\">{props.active.description}</p>\n        </div>\n        {props.stops.map(renderLegendKeys)}\n      </div>\n    </>\n  );\n};\n\nexport default Legend;\n","import React, { useRef, useEffect, useState } from 'react';\n\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport Optionsfield from './components/Optionsfield';\nimport Legend from './components/Legend';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoibmF0azciLCJhIjoiY2t5dmc0anBpMHk4bzJybzhkdGg0MHdzdCJ9.nTfTTvKc1T0IQeIZocIOQA';\n\nexport default function App() {\n\t// defaults\n\tconst mapContainer = useRef(null);\n\tconst map = useRef(null);\n\tconst [lng, setLng] = useState(10.4515);\n\tconst [lat, setLat] = useState(51.1657);\n\tconst [zoom, setZoom] = useState(5);\n\n\tconst options = [\n\t    {\n\t      name: 'Key Biodiversity Areas',\n\t      description: 'Natura 2000 sites incl. 2 km buffer zones.',\n\t      layer: 'n2k-germany',\n\t      stops: [\n\t        [\"Cropland\", '#ecf240'],\n\t        [\"Woodland and forest\", '#3d840b'],\n\t        [\"Grassland\", '#e4bb07'],\n\t        [\"Heathland and scrub\", '#a4c73d'],\n\t        [\"Open spaces with little or no vegetation\", '#52ffb4'],\n\t        [\"Wetland\", '#b472ee'],\n\t        [\"Water\", '#294ffa']\n\t      ]\n\t    },\n\t    {\n\t      name: 'Soil carbon',\n\t      description: 'Organic carbon stored in soil (g C/kg), derived from LUCAS topsoil sample dataset.',\n\t      layer: 'organic_carbon',\n\t      stops: [\n\t        [10.6, '#d7191c'],\n\t        [21.2, '#fdae61'],\n\t        [33.5, '#ffff'],\n\t        [51.5, '#abdda4'],\n\t        [905.2, '#2b83ba'],\n\t      ]\n\t    },\n\t    {\n\t      name: 'Forestry',\n\t      description: 'Tree cover detected from satellite imagery.',\n\t      layer: 'forest_types',\n\t      stops: [\n\t        [\"Tree Cover\", '#22751e']\n\t      ]\n\t    }\n    ];\n    const [active, setActive] = useState(options[0]);\n\n\tuseEffect(() => {\n\t\tif (map.current) return; \n\t\t// initialize map only once\n\t\tmap.current = new mapboxgl.Map({\n\t\t  container: mapContainer.current,\n\t\t  style: 'mapbox://styles/natk7/ckyvg82kk003b14n1tuq11p21',\n\t\t  center: [lng, lat],\n\t\t  zoom: zoom\n\t\t});\n\n\t\t// Adding search box for addresses.\n\t\tmap.current.addControl(\n\t\t\tnew MapboxGeocoder({\n\t\t\t\taccessToken: mapboxgl.accessToken,\n\t\t\t\tmapboxgl: mapboxgl\n\t\t\t})\n\t\t);\n\n\t\tmap.current.on('load', () => {\n\t\t\tfor (const option of options) {\n\t\t\t\tif (active !== option) {\n\t\t\t\t\tmap.current.setLayoutProperty(option.layer, 'visibility', 'none');\n\t\t\t\t}\n\t\t\t};\n\t\t})\n\t});\n\n\tuseEffect(() => {\n\t\tif (!map.current) return; // wait for map to initialize\n\t\tmap.current.on('move', () => {\n\t\t  setLng(map.current.getCenter().lng.toFixed(4));\n\t\t  setLat(map.current.getCenter().lat.toFixed(4));\n\t\t  setZoom(map.current.getZoom().toFixed(2));\n\t\t});\n\t});\n\n\tconst changeState = i => {\n\t\tsetActive(options[i]);\n\t\tfor (let j = 0; j < options.length; j++) {\n\t\t\tif (i === j) {\n\t\t\t\tmap.current.setLayoutProperty(options[j].layer, 'visibility', 'visible');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmap.current.setLayoutProperty(options[j].layer, 'visibility', 'none');\n\n\t\t\t}\n\t\t};\n    };\n\n// \t<!--- \n// <div className=\"sidebar\">\n//         Longitude: {lng} | Latitude: {lat} | Zoom: {zoom}\n//     </div> \n// --->\n\n  return (\n    <div>\n        <header className=\"app-header\">\n          <h1>\n            Building validation against the DNSH Biodiversity criteria (EU Taxonomy).\n          </h1>\n        </header>\n      <div ref={mapContainer} className=\"map-container\" />\n      <Legend active={active} stops={active.stops} />\n      <Optionsfield\n      \tclassName=\"options-field\"\n        options={options}\n        layer={active.layer}\n        changeState={changeState}\n      />\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}